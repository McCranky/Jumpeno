@page "/redirection"
@using Jumpeno.Services

<div class="container text-center bg-form">
    <div class="jumbotron text-center">
        <h1>Jumpeno</h1>
        <hr style="background-color: azure;" />
        <div style="color: azure;">
            <h3>Game Info</h3>
            <p>
                Jumpeno is battle-royale type of game. Jumping is the key. Crush head of other players in order to win. <br />
                On PC move your charaster with left, right arrow and jump with space.
            </p>
        </div>
        <p class="text-warning">Mobile devices should be used as game controller while watching on friend's monitor. </p>
        <p class="text-success">Good luck.</p>
    </div>
    @if (AvailableCode) {
        <button class="btn btn-info" @onclick="Spectate">I want just to Spectate.</button>
    }
    <button class="btn btn-success" @onclick="Play">I want to Play!</button>
</div>

@code {
    [Inject] protected LocalStorageTrackingService LocalStorage { get; set; }
    [Inject] protected NavigationManager Navigation { get; set; }

    public bool AvailableCode { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            string code = await LocalStorage.GetItemValue(LocalStorageTrackingService.Item.GAME_CODE);
            if (String.IsNullOrEmpty(code)) {
                //Navigation.NavigateTo("Identity/Account/Login", true);
                AvailableCode = false;
            } else {
                AvailableCode = true;
            }
            StateHasChanged();
        }
    }

    protected async Task Spectate() {
        await LocalStorage.SetItemValue(LocalStorageTrackingService.Item.PLAYER_LOGIN_METHOD, LocalStorageTrackingService.LogInMethod.SPECTATOR.ToString());
        Navigation.NavigateTo("/");
    }

    protected void Play() {
        Navigation.NavigateTo("Identity/Account/Login", true);
    }
}
